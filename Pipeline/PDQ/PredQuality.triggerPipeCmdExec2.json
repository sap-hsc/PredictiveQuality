{
	"icon": "500px",
	"properties": {},
	"description": "Simulate Production Line",
	"processes": {
		"constantgenerator1": {
			"component": "com.sap.util.constantGenerator",
			"metadata": {
				"label": "Run Once",
				"x": 16,
				"y": 12,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {}
			}
		},
		"python2operator1": {
			"component": "com.sap.system.python2Operator",
			"metadata": {
				"label": "Generate Camera Data",
				"x": 184,
				"y": 12,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"script": "import sys\nimport pyhdfs\nimport numpy as np\nimport re\nimport time\n    \nMYCWD = '/process_image/'\nMYCWD_CSV = '/process_sensor_data/'\nPERMDIR = '/images/'\nPERMDIR_CSV = '/sensor_data/'\nCSV_NAME = 'tmpKafka.csv'\n\nfs = pyhdfs.HdfsClient(hosts='spark-hdfs-adapter:50070', user_name='hdfs')\n\ndef copyIDtoHDFS(idtoCopy):\n    global idToCopy\n    filesNameOld = 'Product'+str(idToCopy-1)+'.jpg'\n    filesNameOld_csv = str(idToCopy-1)+'.csv'\n    fs.delete(MYCWD+filesNameOld)\n    fs.delete(MYCWD_CSV+filesNameOld_csv)\n    fs.delete(MYCWD_CSV+CSV_NAME)\n    #fs.mkdirs(MYCWD)\n    #fs.delete(MYCWD_CSV, recursive=True)\n    #fs.mkdirs(MYCWD_CSV)\n    filesName = 'Product'+str(idToCopy)+'.jpg'\n    filesName_csv = str(idToCopy)+'.csv'\n    fs.copy_to_local(PERMDIR+filesName, '/tmp/'+filesName)\n    fs.copy_to_local(PERMDIR_CSV+filesName_csv, '/tmp/'+filesName_csv)\n    fs.copy_from_local('/tmp/'+filesName, MYCWD+filesName)\n    fs.copy_from_local('/tmp/'+filesName_csv, MYCWD_CSV+filesName_csv)\n    fs.copy_from_local('/tmp/'+filesName_csv, MYCWD_CSV+CSV_NAME)\n    \ndef getProdID():\n    if not fs.exists(MYCWD):\n        fs.mkdirs(MYCWD)\n    if not fs.exists(MYCWD_CSV):\n        fs.mkdirs(MYCWD_CSV)\n    filelist = fs.listdir(MYCWD)\n    return filelist\n\ndef parseID(fname):\n    strID = re.findall(\"\\d+\", fname[0])\n    return int(strID[0])\n\nidToCopy = 1006\n\ndef on_input(data):\n    time.sleep(5) # Delay for 20 seconds.\n    while True:\n        global idToCopy\n        time.sleep(10) # Delay for 20 seconds.\n        \n        LAST_ID = 1093\n        FIRST_ID = 1006\n        flist = getProdID()\n        if (not flist) or (len(flist)>1):\n            idToCopy = FIRST_ID\n        else:\n            idToCopy = parseID(flist)+1\n        \n        if idToCopy > LAST_ID:\n            idToCopy = FIRST_ID\n        \n        copyIDtoHDFS(idToCopy)\n        \n        \n#    api.send(\"output\", 'next')\n     \napi.set_port_callback(\"trigger\", on_input)"
				},
				"additionalinports": [
					{
						"name": "trigger",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "output",
						"type": "string"
					}
				]
			}
		}
	},
	"groups": [
		{
			"name": "group2",
			"nodes": [
				"constantgenerator1",
				"python2operator1"
			],
			"metadata": {
				"description": "Initialize Production Simulation"
			},
			"tags": {
				"python27": "",
				"customPQD": ""
			}
		}
	],
	"connections": [
		{
			"metadata": {
				"points": "140,52 180,52"
			},
			"src": {
				"port": "out",
				"process": "constantgenerator1"
			},
			"tgt": {
				"port": "trigger",
				"process": "python2operator1"
			}
		}
	],
	"inports": {},
	"outports": {}
}
