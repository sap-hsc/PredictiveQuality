{
	"icon": "500px",
	"properties": {},
	"description": "PredQual_HANA_Single",
	"processes": {
		"terminal1": {
			"component": "com.sap.util.terminal",
			"metadata": {
				"label": "Terminal",
				"x": 551.9999980926514,
				"y": 132,
				"height": 80,
				"width": 120,
				"ui": "dynpath",
				"config": {}
			}
		},
		"hdfsconsumer1": {
			"component": "com.sap.storage.hdfs.consumer",
			"metadata": {
				"label": "HDFS Consumer",
				"x": 16,
				"y": 72,
				"height": 80,
				"width": 120,
				"config": {
					"hadoopNamenode": "spark-hdfs-adapter:8020",
					"path": "/process_image",
					"hadoopUser": "hdfs",
					"pollPeriodInMs": 10000,
					"retryPeriodInMs": 0,
					"iconsrc": "hdfs-consumer.png",
					"batchRead": false,
					"chunkSize": 0,
					"recursive": false,
					"onlyReadOnChange": false
				}
			}
		},
		"12multiplexer1": {
			"component": "com.sap.system.multiplexer.1-2",
			"metadata": {
				"label": "1:2 Multiplexer",
				"x": 367.9999990463257,
				"y": 72,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {}
			}
		},
		"saphanaclient1": {
			"component": "com.sap.hana.client",
			"metadata": {
				"label": "SAP HANA Client",
				"x": 551.9999980926514,
				"y": 12,
				"height": 80,
				"width": 120,
				"config": {
					"dsn": "hdb://SYSTEM:Welcome01@xsahana.sap.com:30015",
					"initStatements": "",
					"tableColumnTypes": "prdID varchar, nrLockMax integer, rasterMax1 float, rasterMax2 float, rasterMax3 float, rasterMax4 float, rasterMax5 float, rasterMax6 float, rasterMax7 float, rasterMax8 float, rasterMax9 float, rasterMax10 float, rasterMax11 float, rasterMax12 float, rasterMax13 float, rasterMax14 float, rasterMax15 float, rasterMax16 float, rasterMax17 float, rasterMax18 float, rasterMax19 float, rasterMax20 float, rasterMax21 float, rasterMax22 float, rasterMax23 float, rasterMax24 float, rasterMax25 float, rasterMax26 float, rasterMax27 float, rasterMax28 float, rasterMax29 float, rasterMax30 float, rasterMax31 float, rasterMax32 float, rasterMax33 float, rasterMax34 float, rasterMax35 float, rasterMax36 float, rasterMax37 float, rasterMax38 float, rasterMax39 float, rasterMax40 float, rasterMax41 float, rasterMax42 float, rasterMax43 float, rasterMax44 float, rasterMax45 float, rasterMax46 float, rasterMax47 float, rasterMax48 float, rasterMax49 float, rasterMax50 float, rasterMax51 float, rasterMax52 float, rasterMax53 float, rasterMax54 float, rasterMax55 float, rasterMax56 float, rasterMax57 float, rasterMax58 float, rasterMax59 float, rasterMax60 float, rasterMax61 float, rasterMax62 float, rasterMax63 float, rasterMax64 float, rasterMax65 float, rasterMax66 float, rasterMax67 float, rasterMax68 float, rasterMax69 float, rasterMax70 float, rasterMax71 float, rasterMax72 float, rasterMax73 float, rasterMax74 float, rasterMax75 float, rasterMax76 float, rasterMax77 float, rasterMax78 float, rasterMax79 float, rasterMax80 float, rasterMax81 float, rasterMax82 float, rasterMax83 float, rasterMax84 float, rasterMax85 float, rasterMax86 float, rasterMax87 float, rasterMax88 float, rasterMax89 float, rasterMax90 float, rasterMax91 float, rasterMax92 float, rasterMax93 float, rasterMax94 float, rasterMax95 float, rasterMax96 float, rasterMax97 float, rasterMax98 float, rasterMax99 float, rasterMax100 float, rasterPercentageGE1 float, rasterPercentageGE2 float, rasterPercentageGE3 float, rasterPercentageGE4 float, rasterPercentageGE5 float, rasterPercentageGE6 float, rasterPercentageGE7 float, rasterPercentageGE8 float, rasterPercentageGE9 float, rasterPercentageGE10 float, rasterPercentageGE11 float, rasterPercentageGE12 float, rasterPercentageGE13 float, rasterPercentageGE14 float, rasterPercentageGE15 float, rasterPercentageGE16 float, rasterPercentageGE17 float, rasterPercentageGE18 float, rasterPercentageGE19 float, rasterPercentageGE20 float, rasterPercentageGE21 float, rasterPercentageGE22 float, rasterPercentageGE23 float, rasterPercentageGE24 float, rasterPercentageGE25 float, rasterPercentageGE26 float, rasterPercentageGE27 float, rasterPercentageGE28 float, rasterPercentageGE29 float, rasterPercentageGE30 float, rasterPercentageGE31 float, rasterPercentageGE32 float, rasterPercentageGE33 float, rasterPercentageGE34 float, rasterPercentageGE35 float, rasterPercentageGE36 float, rasterPercentageGE37 float, rasterPercentageGE38 float, rasterPercentageGE39 float, rasterPercentageGE40 float, rasterPercentageGE41 float, rasterPercentageGE42 float, rasterPercentageGE43 float, rasterPercentageGE44 float, rasterPercentageGE45 float, rasterPercentageGE46 float, rasterPercentageGE47 float, rasterPercentageGE48 float, rasterPercentageGE49 float, rasterPercentageGE50 float, rasterPercentageGE51 float, rasterPercentageGE52 float, rasterPercentageGE53 float, rasterPercentageGE54 float, rasterPercentageGE55 float, rasterPercentageGE56 float, rasterPercentageGE57 float, rasterPercentageGE58 float, rasterPercentageGE59 float, rasterPercentageGE60 float, rasterPercentageGE61 float, rasterPercentageGE62 float, rasterPercentageGE63 float, rasterPercentageGE64 float, rasterPercentageGE65 float, rasterPercentageGE66 float, rasterPercentageGE67 float, rasterPercentageGE68 float, rasterPercentageGE69 float, rasterPercentageGE70 float, rasterPercentageGE71 float, rasterPercentageGE72 float, rasterPercentageGE73 float, rasterPercentageGE74 float, rasterPercentageGE75 float, rasterPercentageGE76 float, rasterPercentageGE77 float, rasterPercentageGE78 float, rasterPercentageGE79 float, rasterPercentageGE80 float, rasterPercentageGE81 float, rasterPercentageGE82 float, rasterPercentageGE83 float, rasterPercentageGE84 float, rasterPercentageGE85 float, rasterPercentageGE86 float, rasterPercentageGE87 float, rasterPercentageGE88 float, rasterPercentageGE89 float, rasterPercentageGE90 float, rasterPercentageGE91 float, rasterPercentageGE92 float, rasterPercentageGE93 float, rasterPercentageGE94 float, rasterPercentageGE95 float, rasterPercentageGE96 float, rasterPercentageGE97 float, rasterPercentageGE98 float, rasterPercentageGE99 float, rasterPercentageGE100 float, nrHotSpots integer, xcoord1 float, ycoord1 float, maxval1 float, xcoord2 float, ycoord2 float, maxval2 float, xcoord3 float, ycoord3 float, maxval3 float, xcoord4 float, ycoord4 float, maxval4 float, xcoord5 float, ycoord5 float, maxval5 float",
					"tableName": "3_HANA_HADOOP_IMAGEPROCESSING.img_res_hana",
					"retryPeriodInMs": 0,
					"lineDelimiter": "\\n"
				}
			}
		},
		"graphterminator1": {
			"component": "com.sap.util.graphTerminator",
			"metadata": {
				"label": "Graph Terminator",
				"x": 735.999997138977,
				"y": 72,
				"height": 80,
				"width": 120,
				"config": {}
			}
		},
		"python2operator1": {
			"component": "com.sap.system.python2Operator",
			"metadata": {
				"label": "Python2Operator",
				"x": 199.99999904632568,
				"y": 72,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"script": "import time\nimport sys\nimport pyhdfs\nfrom skimage import io\nimport numpy as np\nfrom skimage.color import rgb2gray\nfrom skimage import measure\nfrom skimage.filters import threshold_otsu\nimport sys\nfrom random import random\nfrom operator import add\nimport numpy as np\nimport re\nimport ntpath\n\nfs = pyhdfs.HdfsClient(hosts='spark-hdfs-adapter:50070', user_name='hdfs')\n\ndef parseInputStream(bstr, idx):\n    img_path = bstr.split(\"\\n\")[0]\n    #img_path = bstr[idx].strip()\n    return img_path\n\ndef copyHDFS(fname):\n    fs.copy_to_local(fname, '/tmp/'+ntpath.basename(fname))\n\ndef loadImage(fname):\n    img = io.imread('/tmp/'+ntpath.basename(fname))\n    return img\n\ndef prepareOutput(x, cntr):\n    lMaxlist = ', '.join(map(str, x.localMaxlist))\n    lMaxlist = lMaxlist.replace('[', '')\n    lMaxlist = lMaxlist.replace(']', '')\n    #sys.stdout.write(lMaxlist+'\\n')\n    lMaxlistGE = ', '.join(map(str, x.localGE75maxlist))\n    lMaxlistGE = lMaxlistGE.replace('[', '')\n    lMaxlistGE = lMaxlistGE.replace(']', '')\n    #sys.stdout.write(lMaxlistGE+'\\n')\n    XYVAL = ', '.join(map(str, x.hostSpotXYVALList))\n    XYVAL = XYVAL.replace('[', '')\n    XYVAL = XYVAL.replace(']', '')\n    #sys.stdout.write(XYVAL+'\\n')\n    prID = 'PRHOOD%d'%(cntr)\n    #sys.stdout.write(prID+'\\n')\n    outstring = '%s, %d, %s, %d, %s'%(prID, x.nrLocalMaxima, lMaxlist + ', ' + lMaxlistGE, x.nrHotSpots, XYVAL)\n    return outstring\n\ndef performImageProcessing(img):\n    image_gray = rgb2gray(img.astype(float))\n\n    # Output the contours of the part\n    imscaled = image_gray/max(image_gray.flatten())\n    contours = measure.find_contours(imscaled, 0.6)\n\n    # binarize\n    thresh_min = threshold_otsu(imscaled)\n    binary_min = imscaled > thresh_min\n\n    # perform morphological cleansing\n    from skimage.morphology import binary_closing, erosion, dilation\n    from skimage.morphology import disk, diamond\n    selem = disk(6)\n    closed = binary_closing(binary_min, selem)\n    er1 = erosion(closed, selem)\n    dilated = dilation(er1, selem)\n\n    # find corners using Harris detector\n    from skimage.feature import corner_harris, corner_subpix, corner_peaks\n    coords = corner_peaks(corner_harris(dilated), min_distance=5)\n\n    boxxmin = np.nanmin(coords[:,0])-10\n    boxxmax = np.nanmax(coords[:,0])+10\n\n    boxymin = np.nanmin(coords[:,1])-10\n    boxymax = np.nanmax(coords[:,1])+10\n\n    deltaX = int(np.ceil((boxxmax - boxxmin)/10))\n    deltaY = int(np.ceil((boxymax - boxymin)/10))\n    regmax              = np.zeros(shape = (100,1))\n    regpercGEmax        = np.zeros(shape = (100,1))\n\n    # Calculate local maxima + % elevated pixels\n    for i in range(1,11):\n        for j in range(1,11):\n            regn = imscaled[(boxxmin+(i-1)*deltaX):(boxxmin+(i)*deltaX):(1), (boxymin+(j-1)*deltaY) : (boxymin+(j)*deltaY) : (1)]\n            regmax[(i-1)*10 + j-1]       = max(regn.flatten())\n            tmp = np.float(len(regn[regn > 0.75*regmax[(i-1)*10 + j-1]]))/np.float(deltaX*deltaY)\n            regpercGEmax[(i-1)*10 + j-1] = tmp\n\n    #get hotspot coordinates\n    top5hotspotCoord    = np.zeros(shape = (15,1))\n    for i in range(0,5):\n        contour = contours[i]\n\n        my = int(np.mean(contour[:,1]))\n\n        mx = int(np.mean(contour[:,0]))\n        mm = max((imscaled[(mx-10):(mx+10):(1), (my-10):(my+10):(1)]).flatten())\n        top5hotspotCoord[3*i+0] = mx\n        top5hotspotCoord[3*i+1] = my\n        top5hotspotCoord[3*i+2] = mm\n\n    # Prepare the result for output\n    import collections\n    ResultStruct = collections.namedtuple('ResStruct', ['nrLocalMaxima', 'localMaxlist', 'localGE75maxlist', 'nrHotSpots', 'hostSpotXYVALList'])\n    res = ResultStruct(100, regmax, regpercGEmax, 5, top5hotspotCoord)\n    return res\n\ndef getProdID(fname):\n    ffname = fname.split('/')[2]\n    strID = re.findall(\"\\d+\", ffname)\n    return int(strID[0])\n\n\n\n#time.sleep(10)\nMAXVAL = 1\ni = 0\n\n\ndef on_input(data):\n    global i\n    while i<MAXVAL:\n        fname = data#parseInputStream(data, i)\n        copyHDFS(fname)\n        img = loadImage(fname)\n        #sys.stdout.write(str(i)+\"\\n\")\n        #sys.stdout.write(fname+\"\\n\")\n        outstring = performImageProcessing(img)\n        prodID = getProdID(fname)\n        pstr = prepareOutput(outstring,prodID)\n        api.send(\"output\", pstr)\n        #time.sleep(1)\n        i = i + 1\n    \n\napi.set_port_callback(\"filename\", on_input)\n"
				},
				"additionalinports": [
					{
						"name": "filename",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "output",
						"type": "string"
					}
				]
			}
		}
	},
	"groups": [],
	"connections": [
		{
			"metadata": {
				"points": "491.9999990463257,121 519.9999985694885,121 519.9999985694885,172 547.9999980926514,172"
			},
			"src": {
				"port": "out2",
				"process": "12multiplexer1"
			},
			"tgt": {
				"port": "in1",
				"process": "terminal1"
			}
		},
		{
			"metadata": {
				"points": "491.9999990463257,103 519.9999985694885,103 519.9999985694885,52 547.9999980926514,52"
			},
			"src": {
				"port": "out1",
				"process": "12multiplexer1"
			},
			"tgt": {
				"port": "inmessage",
				"process": "saphanaclient1"
			}
		},
		{
			"metadata": {
				"points": "675.9999980926514,43 703.9999976158142,43 703.9999976158142,112 731.999997138977,112"
			},
			"src": {
				"port": "out",
				"process": "saphanaclient1"
			},
			"tgt": {
				"port": "stop",
				"process": "graphterminator1"
			}
		},
		{
			"metadata": {
				"points": "140,103 167.99999952316284,103 167.99999952316284,112 195.99999904632568,112"
			},
			"src": {
				"port": "outFilename",
				"process": "hdfsconsumer1"
			},
			"tgt": {
				"port": "filename",
				"process": "python2operator1"
			}
		},
		{
			"metadata": {
				"points": "323.9999990463257,112 363.9999990463257,112"
			},
			"src": {
				"port": "output",
				"process": "python2operator1"
			},
			"tgt": {
				"port": "in1",
				"process": "12multiplexer1"
			}
		}
	],
	"inports": {},
	"outports": {}
}