{"icon":"500px","properties":{},"description":"triggerPipeCmdExec","processes":{"constantgenerator1":{"component":"com.sap.util.constantGenerator","metadata":{"label":"Constant Generator","x":16,"y":72,"height":80,"width":120,"extensible":true,"config":{}}},"graphterminator1":{"component":"com.sap.util.graphTerminator","metadata":{"label":"Graph Terminator","x":582,"y":58,"height":80,"width":120,"config":{}}},"python2operator1":{"component":"com.sap.system.python2Operator","metadata":{"label":"Python2Operator","x":292,"y":58,"height":80,"width":120,"extensible":true,"config":{"script":"import sys\nimport pyhdfs\nimport numpy as np\nimport re\n\nMYCWD = '/process_image/'\nMYCWD_CSV = '/process_sensor_data/'\nPERMDIR = '/images/'\nPERMDIR_CSV = '/sensor_data/'\nCSV_NAME = 'tmpKafka.csv'\n\nfs = pyhdfs.HdfsClient(hosts='spark-hdfs-adapter:50070', user_name='hdfs')\n\ndef copyIDtoHDFS(idtoCopy):\n    global idToCopy\n    fs.delete(MYCWD, recursive=True)\n    fs.mkdirs(MYCWD)\n    fs.delete(MYCWD_CSV, recursive=True)\n    fs.mkdirs(MYCWD_CSV)\n    filesName = 'Product'+str(idToCopy)+'.jpg'\n    filesName_csv = str(idToCopy)+'.csv'\n    fs.copy_to_local(PERMDIR+filesName, '/tmp/'+filesName)\n    fs.copy_to_local(PERMDIR_CSV+filesName_csv, '/tmp/'+filesName_csv)\n    fs.copy_from_local('/tmp/'+filesName, MYCWD+filesName)\n    fs.copy_from_local('/tmp/'+filesName_csv, MYCWD_CSV+CSV_NAME)\n    \ndef getProdID():\n    if not fs.exists(MYCWD):\n        fs.mkdirs(MYCWD)\n    if not fs.exists(MYCWD_CSV):\n        fs.mkdirs(MYCWD_CSV)\n    filelist = fs.listdir(MYCWD)\n    return filelist\n\ndef parseID(fname):\n    strID = re.findall(\"\\d+\", fname[0])\n    return int(strID[0])\n\nidToCopy = 1006\n\ndef on_input(data):\n    global idToCopy\n    LAST_ID = 1093\n    FIRST_ID = 1006\n    flist = getProdID()\n    if (not flist) or (len(flist)>1):\n        idToCopy = FIRST_ID\n    else:\n        idToCopy = parseID(flist)+1\n    \n    if idToCopy > LAST_ID:\n        idToCopy = FIRST_ID\n    \n    copyIDtoHDFS(idToCopy)\n    api.send(\"output\", 'next')\n     \napi.set_port_callback(\"trigger\", on_input)"},"additionalinports":[{"name":"trigger","type":"string"}],"additionaloutports":[{"name":"output","type":"string"}]}}},"groups":[],"connections":[{"metadata":{"points":"140,112 214,112 214,98 288,98"},"src":{"port":"out","process":"constantgenerator1"},"tgt":{"port":"trigger","process":"python2operator1"}},{"metadata":{"points":"416,98 578,98"},"src":{"port":"output","process":"python2operator1"},"tgt":{"port":"stop","process":"graphterminator1"}}],"inports":{},"outports":{}}