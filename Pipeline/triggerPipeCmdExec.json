{"icon":"500px","properties":{},"description":"triggerPipeCmdExec","processes":{"constantgenerator1":{"component":"com.sap.util.constantGenerator","metadata":{"label":"Constant Generator","x":16,"y":72,"height":80,"width":120,"extensible":true,"config":{}}},"graphterminator1":{"component":"com.sap.util.graphTerminator","metadata":{"label":"Graph Terminator","x":582,"y":58,"height":80,"width":120,"config":{}}},"python2operator1":{"component":"com.sap.system.python2Operator","metadata":{"label":"Python2Operator","x":292,"y":58,"height":80,"width":120,"extensible":true,"config":{"script":"import sys\nimport pyhdfs\nimport numpy as np\nimport re\n\nMYCWD = '/Solution/Images/'\nMYCWD_CSV = '/Solution/csv/'\nPERMDIR = '/tmp/Images/'\nPERMDIR_CSV = '/tmp/csv/'\n\nCSV_NAME = 'tmpKafka.csv'\ndef copyIDtoHDFS(idtoCopy):\n    fs.delete(MYCWD, recursive=True)\n    fs.mkdirs(MYCWD)\n    fs.delete(MYCWD_CSV, recursive=True)\n    fs.mkdirs(MYCWD_CSV)\n    filesName = 'Product'+str(idToCopy)+'.jpg'\n    filesName_csv = str(idToCopy)+'.csv'\n    fs.copy_from_local(PERMDIR+filesName, MYCWD+filesName)\n    fs.copy_from_local(PERMDIR_CSV+filesName_csv, MYCWD_CSV+CSV_NAME)\ndef getProdID():\n    if not fs.exists(MYCWD):\n        fs.mkdirs(MYCWD)\n    if not fs.exists(MYCWD_CSV):\n        fs.mkdirs(MYCWD_CSV)\n    filelist = fs.listdir(MYCWD)\n    return filelist\n\ndef parseID(fname):\n    strID = re.findall(\"\\d+\", fname[0])\n    return int(strID[0])\n\n#time.sleep(5)\nfs = pyhdfs.HdfsClient(hosts='spark-hdfs-adapter:50070')\n\nLAST_ID = 1093\nFIRST_ID = 1006\n\nflist = getProdID()\n\n\ndef on_input(data):\n    if (not flist) or (len(flist)>1):\n        idToCopy = FIRST_ID\n    else:\n        idToCopy = parseID(flist)+1\n    \n    if idToCopy > LAST_ID:\n        idToCopy = FIRST_ID\n    \n    copyIDtoHDFS(idToCopy)\n    api.send(\"output\", idToCopy)\n     \napi.set_port_callback(\"trigger\", on_input)\n\n# # Basic Example 1\n# counter = 0\n#\n# def on_input(data):\n#     global counter\n#     counter += 1\n#     api.send(\"output\", counter)\n#\n# api.set_port_callback(\"input\", on_input)\n\n\n# # Basic Example 2\n# def on_input(data1, data2):\n#     api.send(\"output\", data1 + data2)\n#\n# api.set_port_callback([\"input1\", \"input2\"], on_input)\n\n\n# # Generators\n# counter = 0\n#\n# def gen():\n#     global counter\n#     for i in xrange(0, 3):\n#         api.send(\"output\", counter)\n#         counter += 1\n#\n# api.add_generator(gen)\n# api.add_generator(gen)\n\n\n# # Timer\n# counter = 0\n#\n# def t1():\n#     global counter\n#     api.send(\"output\", counter)\n#     counter += 1\n#\n# api.add_timer(\"1s\", t1)\n\n\n# # Shutdown\n# counter = 0\n#\n# def on_input(data):\n#     global counter\n#     counter += 1\n#\n# api.set_port_callback(\"input\", on_input)\n#\n# def shutdown1():\n#     print \"shutdown1: %d\" % counter\n#\n# def shutdown2():\n#     print \"shutdown2: %d\" % counter\n#\n# api.add_shutdown_handler(shutdown1)\n# api.add_shutdown_handler(shutdown2)\n"},"additionalinports":[{"name":"trigger","type":"string"}],"additionaloutports":[{"name":"output","type":"string"}]}}},"groups":[],"connections":[{"metadata":{"points":"140,112 214,112 214,98 288,98"},"src":{"port":"out","process":"constantgenerator1"},"tgt":{"port":"trigger","process":"python2operator1"}},{"metadata":{"points":"416,98 578,98"},"src":{"port":"output","process":"python2operator1"},"tgt":{"port":"stop","process":"graphterminator1"}}],"inports":{},"outports":{}}